{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createAsyncThunk, createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { useAppSelector } from \"../Store\";\nimport { fetchNotificationsApiAsync, updateAllNotificationsApiAsync, updateNotificationItemApiAsync } from \"../../axios/api-services/notifications\";\nimport { selectCurrentUserNameSelector } from \"./current-user-slice\";\nfunction getEmptyNotification() {\n  return {\n    userId: \"\",\n    allNotificationsEmail: true,\n    programsEmail: true,\n    tasksEmail: false,\n    approvalRequestsEmail: true,\n    reportsEmail: false,\n    commentsOnMyPostsEmail: true,\n    postsEmail: true,\n    commentsEmail: false,\n    mentionsEmail: true,\n    directMessagesEmail: false,\n    allNotificationsInApp: true,\n    programsInApp: false,\n    tasksInApp: true,\n    approvalRequestsInApp: true,\n    reportsInApp: true,\n    commentsOnMyPostsInApp: false,\n    postsInApp: true,\n    commentsInApp: false,\n    mentionsInApp: true,\n    directMessagesInApp: true\n  };\n}\nconst initialState = {\n  notification: getEmptyNotification()\n};\nexport const updateNotificationItem = createAsyncThunk(\"current-notification/change-notification-item\", async (notificationDetails, thunkAPI) => {\n  return await updateNotificationItemApiAsync(notificationDetails);\n});\nexport const updateAllNotifications = createAsyncThunk(\"current-notification/update-all-notifications\", async (notificationDetails, thunkAPI) => {\n  return await updateAllNotificationsApiAsync(notificationDetails);\n});\nexport const fetchNotifications = _s(createAsyncThunk(\"current-notification/fetch-all-notifications\", _s(async thunkAPI => {\n  _s();\n  return await fetchNotificationsApiAsync(useAppSelector(selectCurrentUserNameSelector), getEmptyNotification());\n}, \"bRaY7Fsh/GrWHjZMhGvF04Z7BZI=\", false, function () {\n  return [useAppSelector];\n})), \"bRaY7Fsh/GrWHjZMhGvF04Z7BZI=\", false, function () {\n  return [useAppSelector];\n});\nexport const NotificationSlice = createSlice({\n  name: \"current-notification\",\n  initialState,\n  reducers: {\n    updateAllNotificationsAction: (state, action) => {\n      state.notification = action.payload;\n    },\n    updateNotificationItemAction: (state, action) => {\n      let obj = action.payload;\n      obj = {\n        ...obj,\n        [action.payload.key]: action.payload.value\n      };\n      state.notification = obj;\n      return state;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateNotificationItem.fulfilled, (state, action) => {\n      let obj = action.payload;\n      obj = {\n        ...obj,\n        [action.payload.key]: action.payload.value\n      };\n      state.notification = obj;\n      return state;\n    });\n    builder.addCase(updateAllNotifications.fulfilled, (state, action) => {\n      state.notification = action.payload;\n    });\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.notification = action.payload;\n    });\n  }\n});\nconst selectSelf = state => state.notification;\nexport const selectCurrentNotification = createSelector([selectSelf], notification => notification.notification);\nexport const searchNotificationByKey = createSelector([selectSelf, (selectSelf, searchText) => searchText], (selectSelf, search) => {\n  return Object.entries(selectSelf.notification).filter(c => c[1]);\n});\nexport default NotificationSlice.reducer;\nexport const {\n  updateAllNotificationsAction,\n  updateNotificationItemAction\n} = NotificationSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSelector","createSlice","useAppSelector","fetchNotificationsApiAsync","updateAllNotificationsApiAsync","updateNotificationItemApiAsync","selectCurrentUserNameSelector","getEmptyNotification","userId","allNotificationsEmail","programsEmail","tasksEmail","approvalRequestsEmail","reportsEmail","commentsOnMyPostsEmail","postsEmail","commentsEmail","mentionsEmail","directMessagesEmail","allNotificationsInApp","programsInApp","tasksInApp","approvalRequestsInApp","reportsInApp","commentsOnMyPostsInApp","postsInApp","commentsInApp","mentionsInApp","directMessagesInApp","initialState","notification","updateNotificationItem","notificationDetails","thunkAPI","updateAllNotifications","fetchNotifications","_s","NotificationSlice","name","reducers","updateAllNotificationsAction","state","action","payload","updateNotificationItemAction","obj","key","value","extraReducers","builder","addCase","fulfilled","selectSelf","selectCurrentNotification","searchNotificationByKey","searchText","search","Object","entries","filter","c","reducer","actions"],"sources":["/home/johnadeniran/Documents/Projects/Mentor-Management-System-Team-3/frontend/mms-Admin/src/services/redux/slices/notification-slice.ts"],"sourcesContent":["import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport { RootState, useAppSelector } from \"../Store\";\nimport { Notification } from \"../types/notification\";\nimport {\n  fetchNotificationsApiAsync,\n  updateAllNotificationsApiAsync,\n  updateNotificationItemApiAsync,\n} from \"../../axios/api-services/notifications\";\nimport { selectCurrentUserNameSelector } from \"./current-user-slice\";\n\ninterface CurrentNotificationState {\n  notification: Notification;\n}\n\nfunction getEmptyNotification(): Notification {\n  return {\n    userId: \"\",\n    allNotificationsEmail: true,\n    programsEmail: true,\n    tasksEmail: false,\n    approvalRequestsEmail: true,\n    reportsEmail: false,\n    commentsOnMyPostsEmail: true,\n    postsEmail: true,\n    commentsEmail: false,\n    mentionsEmail: true,\n    directMessagesEmail: false,\n    allNotificationsInApp: true,\n    programsInApp: false,\n    tasksInApp: true,\n    approvalRequestsInApp: true,\n    reportsInApp: true,\n    commentsOnMyPostsInApp: false,\n    postsInApp: true,\n    commentsInApp: false,\n    mentionsInApp: true,\n    directMessagesInApp: true,\n  };\n}\n\nconst initialState: CurrentNotificationState = {\n  notification: getEmptyNotification(),\n};\n\nexport const updateNotificationItem = createAsyncThunk(\n  \"current-notification/change-notification-item\",\n  async (\n    notificationDetails: { key: string; value: boolean; obj: Notification },\n    thunkAPI\n  ) => {\n    return await updateNotificationItemApiAsync(notificationDetails);\n  }\n);\n\nexport const updateAllNotifications = createAsyncThunk(\n  \"current-notification/update-all-notifications\",\n  async (notificationDetails: Notification, thunkAPI) => {\n    return await updateAllNotificationsApiAsync(notificationDetails);\n  }\n);\n\nexport const fetchNotifications = createAsyncThunk(\n  \"current-notification/fetch-all-notifications\",\n  async (thunkAPI) => {\n    return await fetchNotificationsApiAsync(\n      useAppSelector(selectCurrentUserNameSelector),\n      getEmptyNotification()\n    );\n  }\n);\n\nexport const NotificationSlice = createSlice({\n  name: \"current-notification\",\n  initialState,\n  reducers: {\n    updateAllNotificationsAction: (\n      state,\n      action: PayloadAction<Notification>\n    ) => {\n      state.notification = action.payload;\n    },\n    updateNotificationItemAction: (state, action: PayloadAction<any>) => {\n      let obj: any = action.payload;\n      obj = { ...obj, [action.payload.key]: action.payload.value };\n      state.notification = obj;\n      return state;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(updateNotificationItem.fulfilled, (state, action) => {\n      let obj: any = action.payload;\n      obj = { ...obj, [action.payload.key]: action.payload.value };\n      state.notification = obj;\n      return state;\n    });\n\n    builder.addCase(updateAllNotifications.fulfilled, (state, action) => {\n      state.notification = action.payload;\n    });\n\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.notification = action.payload;\n    });\n  },\n});\n\nconst selectSelf = (state: RootState) => state.notification;\n\nexport const selectCurrentNotification = createSelector(\n  [selectSelf],\n  (notification): Notification => notification.notification\n);\n\nexport const searchNotificationByKey = createSelector(\n  [selectSelf, (selectSelf, searchText: string) => searchText],\n  (selectSelf, search: string) => {\n    return Object.entries(selectSelf.notification).filter((c) => c[1]);\n  }\n);\n\nexport default NotificationSlice.reducer;\nexport const { updateAllNotificationsAction, updateNotificationItemAction } =\n  NotificationSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}